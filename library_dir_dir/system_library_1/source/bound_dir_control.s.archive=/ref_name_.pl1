/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


ref_name_: proc ();

/*
   Written September 1974 by R. Bratt

   ref_name_ manages the reference name table

   ---> ref_name_$insert adds a reference name, segment number pair to the RNT
   USAGE: call ref_name_$insert (rname, segno, code);

   ---> ref_name_$delete removes a reference name from the RNT
   USAGE: call ref_name_$delete (rname, segno,  code);

   ---> ref_name_$delete_segno removes all names for a given segment number from the RNT
   USAGE: call ref_name_$delete_segno (segno, code);

   ---> ref_name_$get_segno maps a reference name into a segment number
   USAGE: call ref_name_$get_segno (rname, segno, code);

   ---> ref_name_$get_refnames maps a segment number into a name
   USAGE: call ref_name_$get_refnames (segno, strp, code);

   rname char(32) varying --- reference name
   segno fixed bin(17) --- segment number
   strp ptr --- pointer to structure for returning reference names
   code fixed bin(35) --- error code

    --> ref_name_$get_count (segno, n_names)

   Last Modified:

   10/22/75 by R. Bratt to fix a stupid cross-ring bug
   07/13/76 by R. Bratt to move rnt out of ring zero (major overhaul) and further updated 3/25/77 by M. Weaver
   11/11/77 by M. Weaver to use PL/I offsets in rnt and to add area handler
    May 1982 BIM for get_count.
   12/22/83 by M. Weaver to fix bug in search_name that affects delete_segno

*/

dcl  a_rname char (32) varying,
    (a_segno, segno, cnt) fixed bin (17),
    (a_strp, strp) ptr,
     rname char (32) varying,
    (savep, save_rntep, last_np, last_sp) ptr,
     a_code fixed bin (35),
     ring fixed bin (3),
     rnt_size fixed bin,
    (new_rnt_areap, new_rntp) ptr,
     area condition,
     hash_offset offset (rnt.areap -> based_rnt_area) based,
     steps fixed bin (17),
     max_steps fixed bin (17) static init (1000) options (constant),
    (null, substr, length, ptr, rtrim, addrel, bit, fixed, addr, rel, bin) builtin;

dcl a_count fixed bin;

dcl 1 reference_names aligned based (strp),
    2 names_allocated fixed bin (17),
    2 names_returned fixed bin (17),
    2 name (1 refer (names_allocated)) char (32) varying;


dcl (dimension, max, min, mod, reverse, verify) builtin;

dcl (error_table_$segknown, error_table_$namedup, error_table_$argerr) ext fixed bin (35);
dcl (error_table_$name_not_found, error_table_$area_too_small, error_table_$inconsistent_rnt) ext fixed bin (35);
dcl  error_table_$r0_refname ext fixed bin (35);
dcl  pds$stacks (0:7) ptr ext;
dcl  level$get ext entry () returns (fixed bin (3));


insert:
	entry (a_rname, a_segno, a_code);
	call setup ("11"b);

	on area begin;				/* reallocate a larger rnt and copy */
	     declare new_rnt_area area (rnt_size) based (new_rnt_areap);
	     rnt_size = rnt.rnt_area_size * 2;		/* double the size */
	     allocate new_rnt_area in (pds$stacks (ring) -> stack_header.clr_ptr -> based_rnt_area)
		set (new_rnt_areap);

	     new_rnt_areap -> new_rnt_area = rnt.areap -> based_rnt_area;
	     new_rntp = addrel (new_rnt_areap, (bin (rel (rntp), 18) - bin (rel (rnt.areap), 18)));
						/* locate copy of rnt within area */
	     new_rntp -> rnt.areap = new_rnt_areap;
	     new_rntp -> rnt.rnt_area_size = rnt_size;
	     new_rntp -> rnt.srulep = addrel (new_rnt_areap, (bin (rel (rnt.srulep), 18) - bin (rel (rnt.areap), 18)));
						/* must relocate search rule ptr in new area */
	     pds$stacks (ring) -> stack_header.rnt_ptr = new_rntp;
	     free rnt.areap -> based_rnt_area;
	     rntp = new_rntp;
	     goto reinsert;				/* start over to get correct pointers */
	end;

	rnt.insert.trys = rnt.insert.trys + 1;
reinsert:
	if search_name ()
	then if rnte.segno = segno
	     then call abort (error_table_$segknown);
	     else call abort (error_table_$namedup);

          lth = length (rtrim (rname));
	allocate rnte in (rnt.areap -> based_rnt_area) set (rntep);
	rnte.name_fp = null ();
	last_sp = segno_header ();
	rnte.segno_fp = last_sp -> hash_offset;
	last_sp -> hash_offset = rntep;
	last_np -> rnte.name_fp = last_sp -> hash_offset;
	rnte.segno = segno;
	rnte.name = rname;
	rnt.insert.wins = rnt.insert.wins + 1;
	return;


delete:
	entry (a_rname, a_segno, a_code);
	call setup ("10"b);
	rnt.delete_name.trys = rnt.delete_name.trys + 1;
	if ^search_name () then call abort (error_table_$name_not_found);
	a_segno, segno = rnte.segno;
	last_np -> rnte.name_fp = rnte.name_fp;
	savep = rntep;
	call search_segno ();
	do while (savep ^= rntep);
	     if rntep = null () then call abort (error_table_$inconsistent_rnt);
	     call quick_next ();
	end;
	last_sp -> rnte.segno_fp = rnte.segno_fp;
	free rnte in (rnt.areap -> based_rnt_area);
	rnt.delete_name.wins = rnt.delete_name.wins +1;
	return;



delete_segno:
	entry (a_segno, a_code);
	call setup ("01"b);
	rnt.delete_segno.trys = rnt.delete_segno.trys + 1;
	call search_segno ();
	do while (rntep ^= null ());
	     savep = last_sp;
	     save_rntep = rntep;
	     rname = rnte.name;
	     if ^search_name () then call abort (error_table_$inconsistent_rnt);
	     if save_rntep ^= rntep then call abort (error_table_$inconsistent_rnt);
	     last_sp -> rnte.segno_fp = rnte.segno_fp;
	     last_np -> rnte.name_fp = rnte.name_fp;
	     free rnte in (rnt.areap -> based_rnt_area);
	     rntep = savep;
	     call quick_next ();
	end;
	rnt.delete_segno.wins = rnt.delete_segno.wins + 1;
	return;



get_segno:
	entry (a_rname, a_segno, a_code);
	call setup ("10"b);
	rnt.get_segno.trys = rnt.get_segno.trys + 1;
	if ^search_name () then call abort (error_table_$name_not_found);
	a_segno = rnte.segno;
	rnt.get_segno.wins = rnt.get_segno.wins + 1;
	return;


get_refnames:
	entry (a_segno, a_strp, a_code);
	call setup ("01"b);
	rnt.get_refnames.trys = rnt.get_refnames.trys + 1;
	strp = a_strp;
	names_returned = 0;
	cnt = 0;
	call search_segno ();
	do while (rntep ^= null ());
	     if cnt = names_allocated
	     then do;
		names_returned = cnt;
		call abort (error_table_$area_too_small);
	     end;
	     cnt = cnt + 1;
	     reference_names.name (cnt) = rnte.name;
	     call quick_next ();
	end;
	names_returned = cnt;
	if cnt > 0 then rnt.get_refnames.wins = rnt.get_refnames.wins + 1;
	return;


get_count:
	entry (a_segno, a_count, a_code);
	call setup ("01"b);
	a_count = 0;
	call search_segno ();
	do while (rntep ^= null ());
	     a_count = a_count + 1;
	     call quick_next ();
	end;
	return;


search_name:
	proc () returns (bit (1));
	     steps = 0;
	     last_np, rntep = name_header ();
	     do while (rnte.name_fp ^= null ());
		steps = steps + 1;
		if steps > max_steps then call abort (error_table_$inconsistent_rnt);
		last_np = rntep;
		rntep = rnte.name_fp;
		if length (rname) = rnte.length
		then if rnte.name = rname
		     then return ("1"b);
	     end;
	     last_np = rntep;			/* in this case, last_np must point to most rcent node */
	     return ("0"b);
	end search_name;



search_segno:
	proc ();
	     last_sp, rntep = addrel (segno_header (), -1);
quick_next:
	     entry ();
	     do while (rnte.segno_fp ^= null ());
		steps = steps+1;
		if steps > max_steps then call abort (error_table_$inconsistent_rnt);
		last_sp = rntep;
		rntep = rnte.segno_fp;
		if segno = rnte.segno
		then return;
	     end;
	     rntep = null ();
	     return;
	end search_segno;

segno_header: proc () returns (ptr);
	     return (addr (rnt.segno_hash_table (mod (segno, dimension (rnt.segno_hash_table, 1) -1))));
	end segno_header;

name_header: proc () returns (ptr);
dcl  chars char (4) aligned,
     bits fixed bin (35) based (addr (chars));
	     substr (chars, 1, 2) = rname;
	     substr (chars, 3, 2) = substr (rname, max (length (rname)-1, 1), min (length (rname), 2));
	     return (addr (rnt.name_hash_table (mod (bits, dimension (rnt.name_hash_table, 1) -1))));
	end name_header;

setup:	proc (given_string);
dcl  given_string bit (36) aligned;

dcl  1 given aligned,
     2 name bit (1) unaligned,
     2 seg_no bit (1) unaligned;

     string (given) = given_string;

	     a_code = 0;
	     steps = 0;
	     if given.name
	     then rname = rtrim (a_rname);

	     if given.seg_no
	     then do;
		segno = a_segno;
		if segno < 0 then call abort (error_table_$argerr);
	     end;
	     ring = level$get ();
	     if ring = 0 then call abort (error_table_$r0_refname);
	     rntp = pds$stacks (ring) -> stack_header.rnt_ptr;
	     return;
	end setup;

abort:
	proc (code);
dcl  code fixed bin (35);
	     a_code = code;
	     go to non_local_return;
	end abort;

non_local_return:
	return;

/*  */

	%include rnt;


/*  */

%include stack_header;

     end ref_name_;



