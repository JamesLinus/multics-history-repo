/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* exponent_control_

   subroutine interface to exponent control flags

*/

exponent_control_:
     proc;

	return;

/* Date Changed (and reason) */
/* Coded February 28 1980 Benson I. Margulies */

dcl  hcs_$get_exponent_control entry (bit (1) aligned, bit (1) aligned, bit (72) aligned);
dcl  hcs_$set_exponent_control entry (bit (1) aligned, bit (1) aligned, bit (72) aligned, fixed bin (35));

dcl (restart_underflow, restart_overflow) bit (1) aligned;
dcl  overflow_value float bin (63);
dcl (a_code, code) fixed bin (35);

dcl  bool_mask bit (3) aligned;
dcl  bool_op bit (4) aligned;

%include exponent_control_info;

/*  */
fault_underflow:
	entry (a_code);

	bool_mask = "010"b;				/* ^underflow, overflow, ^value */
	goto FAULT_COMMON;

fault_overflow:
	entry (a_code);

	bool_mask = "100"b;				/* underflow, ^overflow, ^value */

FAULT_COMMON:
	bool_op = "1"b4;				/* and */
	goto COMMON;

restart_underflow:
	entry (a_code);

	bool_mask = "100"b;				/* underflow, ^overflow, ^value */
	goto RESTART_COMMON;

restart_overflow:
	entry (a_code);

	bool_mask = "010"b;				/* ^underflow, overflow, ^value */
	goto RESTART_COMMON;

restart_overflow_value:
	entry (New_value, a_code);

dcl  New_value float bin (63) parameter;

	bool_mask = "011"b;				/* ^underflow, overflow, value */

RESTART_COMMON:
	bool_op = "7"b4;				/* or */

COMMON:	call GET_CURRENT_VALUES;

	restart_underflow = bool (restart_underflow, substr (bool_mask, 1, 1), bool_op);
	restart_overflow = bool (restart_overflow, substr (bool_mask, 2, 1), bool_op);

	if bool_op = "7"b4 then			/* setting restart flags */
	     if substr (bool_mask, 2, 1) then		/* overflow flag */
		if substr (bool_mask, 3, 1) then	/* value flag */
		     overflow_value = New_value;
		else overflow_value = Default_exponent_control_overflow_value;

	call PUT_CURRENT_VALUES;
	a_code = 0;
	return;

/*  */
GET_CURRENT_VALUES:
	procedure;

dcl  overflow_bits bit (72) aligned;

	     call hcs_$get_exponent_control (restart_underflow, restart_overflow, overflow_bits);
	     unspec (overflow_value) = overflow_bits;
	     return;

PUT_CURRENT_VALUES:
	     entry;

	     overflow_bits = unspec (overflow_value);
	     call hcs_$set_exponent_control (restart_underflow, restart_overflow, overflow_bits, code);
	     if code ^= 0 then do;
		a_code = code;
		goto exit;
	     end;
	     return;
	end;

exit:	return;

     end;




