/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Changed 6/13/77 for even-word aligned allocations to have
   correct max_record_size */
/*
Modified:
07/14/81 by Lindsey Spratt:  In get_seg_ptr, when closing the current fcb and
	  re-opening, set the fcbp in the attach block as well as the
	  fcb_ptr in the indx_cb, since the fcb may have moved.
	       Change from using the iocbv include file to the iocb.incl.pl1
	  include file.  This is necessary because the iocbv.incl.pl1
	  include file has been deleted from the system as obsolete.
11/16/82 by Lindsey Spratt:  Changed to extend the seg_ptr_array when an
	  attempt to get a seg_ptr for a compnum >= seg_ptr_array_limit is
	  made via the get_seg_ptr entry.
02/05/85 by Steve Herbst: Fixed $get_seg_ptr to reinitialize file information
	  when the file has been closed and reopened because
	  msf_manager_$get_ptr has failed. Fixes bug allowing KST overflow
	  to damage files.
*/

/* format: style2,ind3 */
create_seg_ptrs:
   proc (iocb_ptr);
      begin;
         indx_cb_ptr = iocb_ptr -> iocb.open_data_ptr;
         f_b_ptr = file_base_ptr;
         if file_version = 10				/* previous file version */
         then
	  do;					/* use old version file base info */
	     comp_number = old_version_index_tail_comp_num;
	     comp_info_ptr = addr (old_version_comp_info);
	  end;
         else
	  do;
	     index_state_ptr = addr (index_state_blocks (index_state));
	     is_ptr = index_state_ptr;
	     comp_number = index_tail_comp_num;
	     comp_info_ptr = addr (file_base.max_comp_num);
	  end;
         seg_ptr_array_limit = comp_info.last_comp_num + 2; /* allow 2 for growth, note: this must
						   be large enough for alloc_cb_file */
         call alloc_cb_file (size (seg_ptr_array), seg_ptr_array_ptr);
         seg_ptr_array = null;
         seg_ptr_array (0) = f_b_ptr;
         do while (comp_number > 0);			/* initiate additional index components */
	  p = get_seg_ptr (iocb_ptr, comp_number);	/* sets value in seg_ptr_array */
	  if file_version <= 30			/* old version comp_table */
	  then comp_number = old_comp_info.comp_link (comp_number);
	  else comp_number = comp_info.comp_link (comp_number);
         end;
         node_length = 4 * node_size;
         half_node_length = 2 * node_size;
         if file_version >= 40			/* latest version doesn't waste first two words */
         then max_record_size = 4 * max_seg_limit - 8;	/* compare with seq files */
         else max_record_size = 4 * max_seg_limit - 16;
         rover_seg_ptr = get_seg_ptr (iocb_ptr, rover_comp_num);
         old_last_comp_num = comp_info.last_comp_num;
         old_rover_comp_num = rover_comp_num;
         return;

         dcl     comp_info_ptr	ptr;
         dcl     1 comp_info		based (comp_info_ptr),
	         2 max_comp_num	fixed,
	         2 last_comp_num	fixed,
	         2 first_free_comp_num
				fixed,
	         2 comp_table	(0:true_max_comp_num) aligned,
		 3 seg_limit	fixed (19),
		 3 comp_link	fixed (17) unal,
		 3 init_offset	fixed (18) unsigned unal;
         dcl     1 old_comp_info	based (comp_info_ptr),
	         2 max_comp_num	fixed,
	         2 last_comp_num	fixed,
	         2 first_free_comp_num /* not supported--used for converting versions */,
	         2 comp_table	(0:true_max_comp_num),
		 3 seg_limit	fixed (19),
		 3 comp_link	fixed (15) unal,
		 3 init_offset	fixed (18) unal;
      end;					/* end of create_seg_ptrs routine */

free_seg_ptrs:
   entry (iocb_ptr);
      indx_cb_ptr = iocb_ptr -> iocb.open_data_ptr;
      call free_cb_file (size (seg_ptr_array), seg_ptr_array_ptr);
      return;

get_new_seg:
   entry (iocb_ptr, comp_num, seg_ptr, substate_arg, abort_exit);
      indx_cb_ptr = iocb_ptr -> iocb.open_data_ptr;
      f_b_ptr = file_base_ptr;
      fs_ptr = file_state_ptr;			/* not yet supported
						   if first_free_comp_num^=0 then do; use existing component
						   comp_num=first_free_comp_num;
						   first_free_comp_num=comp_link(comp_num);
						   call msf_manager_$get_ptr(fcb_ptr,comp_num,"0"b,seg_ptr,foo24,foo);
						   seg_ptr_array(comp_num)=seg_ptr;
						   end;
						   */
						/* else */
      do;						/* create new component */
         if comp_num >= max_comp_num
         then go to abort_exit;
         if comp_num >= seg_ptr_array_limit
         then call extend_seg_ptr_array (1);
         last_comp_num = comp_num;
         call adjust_if_nec;
         call set_new_ptr;
         old_last_comp_num = last_comp_num;
      end;
      return;					/* end get new seg */

/* not yet supported
   free_seg:entry(iocb_ptr,comp_num,seg_ptr); the segment must already be zeroed
   indx_cb_ptr=iocb_ptr->iocb.open_data_ptr;
   f_b_ptr=file_base_ptr;
   seg_ptr_array(comp_num)=null;
   call hcs_$set_bc_seg(seg_ptr,0,foo);
   seg_limit(comp_num)=0;
   comp_link(comp_num)=first_free_comp_num;
   first_free_comp_num=comp_num;
   return;
   */

adjust_if_nec:
   proc;
      if repeating
      then
         do;
	  call check_substate;
	  if substate_arg = next_substate
	  then call msf_manager_$adjust (fcb_ptr, comp_num - 1, foo24, "000"b, foo);
	  return;
         end;
      substate_arg = substate_arg + 1;
   end adjust_if_nec;

set_new_ptr:
   proc;
      if repeating
      then
         do;
	  call check_substate;
	  seg_ptr = get_seg_ptr (iocb_ptr, comp_num);
	  return;
         end;
      call msf_manager_$get_ptr (fcb_ptr, comp_num, "1"b, seg_ptr, foo24, foo);
      if seg_ptr = null				/* unable to get new component */
      then
         do;
	  if foo ^= 0
	  then call sub_err_ (foo, "vfile_", "c", null, foo, "Unable to create a new msf component.");
	  return;
         end;
      seg_ptr_array (comp_num) = seg_ptr;
      substate_arg = substate_arg + 1;
   end set_new_ptr;

check_substate:
   proc;
      next_substate = next_substate + 1;
      if substate_arg = next_substate
      then repeating = "0"b;				/* execution resumes normally */
   end check_substate;

set_bitcounts:
   entry (iocb_ptr);
      indx_cb_ptr = iocb_ptr -> iocb.open_data_ptr;
      f_b_ptr = file_base_ptr;
      do i = 0 to last_comp_num;
         if seg_limit (i) > 0
         then
	  do;
	     if seg_ptr_array (i) = null
	     then call msf_manager_$get_ptr (fcb_ptr, i, "0"b, seg_ptr_array (i), foo24, foo);
	     call hcs_$set_bc_seg (seg_ptr_array (i), 36 * seg_limit (i), foo);
	     if foo = 0
	     then seg_limit (i) = -seg_limit (i);
	  end;
      end;
      return;					/* end set_`