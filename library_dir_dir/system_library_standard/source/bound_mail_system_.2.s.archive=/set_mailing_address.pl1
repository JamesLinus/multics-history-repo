/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1989                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-12-05,Parisek), approve(89-01-11,MCR8044),
     audit(89-01-16,Farley), install(89-01-19,MR12.3-1006):
     A. Return aliases for the specified name supplied to dsmla.
     B. Accept starnames as input to the dsmla command using case
        insensitivity.
                                                   END HISTORY COMMENTS */


/* format: style2,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,idind22 */

/* (set display)_mailing_address: These commands are used by
   ordinary users to manipulate their own Mail Table addresses, to
   manipulate Mail Table addresses for which tey have been granted
   access by an administrator, and to display any user's mailing
   address. */

/* Written: July 1983 by B. Margolin */
/* Modified: February 1984 by B. Margolin to suppress "No ACS path" in
   display_mailing_address and to compare the input entry name length against
   maxlength of the internal variable, not length */

set_mailing_address:
smla:
     proc options (variable);

	dcl     check_star_name_	entry (char (*), bit (36), fixed bin (2), fixed bin (35));
	dcl     com_err_		entry () options (variable);
	dcl     ioa_		entry () options (variable);
	dcl     mail_system_$free_address
				entry (ptr, fixed bin (35));
	dcl     mail_table_$get	entry (char (*) varying, ptr, char (*), fixed bin (35));
	dcl     mail_table_$get_aliases
				entry (char (*) var, char (*), ptr, ptr, fixed bin (35));
	dcl     mail_table_$get_name_by_index
				entry (fixed bin, char (*), char (*) var, fixed bin (35));
	dcl     mail_table_$set	entry (char (*) var, ptr, fixed bin (35));
	dcl     match_star_name_	entry (char (*), char (*), fixed bin (35));
	dcl     mlsys_utils_$format_address_field
				entry (char (*) var, ptr, fixed bin, ptr, fixed bin (21), fixed bin (21),
				fixed bin (35));
	dcl     mlsys_utils_$parse_address_control_args
				entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
	dcl     ssu_$abort_line	entry () options (variable);
	dcl     ssu_$get_area	entry (ptr, ptr, char (*), ptr);
	dcl     ssu_$arg_count	entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$destroy_invocation
				entry (ptr);
	dcl     ssu_$print_message	entry () options (variable);
	dcl     ssu_$release_area	entry (ptr, ptr);
	dcl     ssu_$standalone_invocation
				entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

	dcl     address_ptr		ptr;
	dcl     alias_area_ptr	ptr;
	dcl     arg		char (arg_len) based (arg_ptr);
	dcl     arg_count		fixed bin;
	dcl     arg_idx		fixed bin;
	dcl     arg_len		fixed bin (21);
	dcl     arg_ptr		ptr;
	dcl     ca_address_ptr	ptr;
	dcl     cleanup		condition;
	dcl     code		fixed bin (35);
	dcl     default_project	bit (1);
	dcl     ignore_code		fixed bin (35);
	dcl     match_stars		bit (1);
	dcl     1 pcao		aligned like parse_ca_options;
	dcl     person_id		char (32) varying;
	dcl     person_id_specified	bit (1);
	dcl     sci_ptr		ptr;
	dcl     star_name		bit (1);
	dcl     star_type		fixed bin (2);
	dcl     WHOAMI		char (23);
	dcl     VERSION		char (3) init ("1.0") int static options (constant);
	dcl     (
	        error_table_$action_not_performed,
	        error_table_$bad_arg,
	        error_table_$bad_index,
	        error_table_$bad_subr_arg,
	        error_table_$badopt,
	        error_table_$bigarg,
	        error_table_$id_not_found,
	        error_table_$inconsistent,
	        error_table_$insufficient_access,
	        error_table_$lock_wait_time_exceeded,
	        error_table_$no_record,
	        error_table_$no_w_permission,
	        error_table_$noarg,
	        error_table_$too_many_args
	        )			fixed bin (35) ext static;
	dcl     (addr, index, length, maxlength, null, rtrim, substr)
				builtin;
%page;
%include check_star_name;
%page;
%include mlsys_parse_ca_options;
%page;
%include mail_table_entry;
%page;

	WHOAMI = "set_mailing_address";
	sci_ptr = null ();
	code = 0;
	address_ptr = null ();
	on cleanup call cleanup_smla ();
	call ssu_$standalone_invocation (sci_ptr, WHOAMI, VERSION, null (), abort_smla, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Creating standalone subsystem invocation.");
	     return;
	end;
	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count = 0 then call ssu_$abort_line (sci_ptr, 0, "Usage: ^a {address} {-control_args}", WHOAMI);
	pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	pcao.logbox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	pcao.savebox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	pcao.abort_on_errors = "1"b;
	pcao.validate_addresses = "1"b;
	pcao.flags.mbz = ""b;
	person_id = "";
	person_id_specified = "0"b;
	default_project = "0"b;
	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
	     if arg = "-entry" | arg = "-et" then do;
		if person_id_specified then
		     call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "-entry may only be specified once.");
		person_id_specified = "1"b;
		arg_idx = arg_idx + 1;
NO_NAME:
		if arg_idx > arg_count then
		     call ssu_$abort_line (sci_ptr, error_table_$noarg,
			"-entry must be followed by a Mail Table entry name.");
		call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
		if arg = "" then
		     call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
			"A blank name is not permitted after -entry.");
		if substr (arg, 1, 1) = "-" then go to NO_NAME;
						/* Control arg is not name */
		if arg_len > maxlength (person_id) then
		     call ssu_$abort_line (sci_ptr, error_table_$bigarg, "The Mail Table entry name ""^va"".",
			arg_len, arg);		/* Pad it the way it was given */
		person_id = arg;
	     end;
	     else if arg = "-default_project" | arg = "-dp" then default_project = "1"b;
	     else do;
		/*** Unrecognized by me, must be an address ***/
		call mlsys_utils_$parse_address_control_args (sci_ptr, arg_idx, addr (pcao), ca_address_ptr, code);
		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Parsing address control arguments.");
		if address_ptr ^= null () then do;	/* Already have one */
		     call mail_system_$free_address (ca_address_ptr, ignore_code);
		     call ssu_$abort_line (sci_ptr, error_table_$too_many_args,
			"^/Only one address may be specified.");
		end;
		arg_idx = arg_idx - 1;		/* will be incremented by do loop */
		address_ptr = ca_address_ptr;
	     end;

	end;
	if default_project & address_ptr ^= null () then
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		"^/Both an address and -default_project may not be specified.");
	if ^default_project & address_ptr = null () then
	     call ssu_$abort_line (sci_ptr, error_table_$noarg,
		"Either an address or -default_project must be specified.");
	call mail_table_$set (person_id, address_ptr, code);
	if code ^= 0 then do;
	     if code = error_table_$action_not_performed then
		call ssu_$abort_line (sci_ptr, code, "^/Anonymous users have no Mail Table entries.");
	     else if code = error_table_$bigarg then	/* We have already checked the size of the name */
		call ssu_$abort_line (sci_ptr, 0, "The address is too large to be stored in the Mail Table.");
	     else if code = error_table_$insufficient_access then
		call ssu_$abort_line (sci_ptr, code,
		     "^/You do not have access to modify ^[^a'^[s^]^;your^] mailing address.", person_id_specified,
		     person_id, ^ends_in_s (person_id));
	     else if code = error_table_$no_w_permission then
		call ssu_$abort_line (sci_ptr, code,
		     "^/You do not have access to modify the Mail Table; this may only be performed^/at an AIM authorization of system_low."
		     );
	     else if code = error_table_$bad_subr_arg then
		call ssu_$abort_line (sci_ptr, error_table_$inconsistent,
		     "^/-default_project may not be specified^[ for ^a^;^s^], as ^[it is^;you are^] not a registered user.",
		     person_id_specified, person_id, person_id_specified);
	     else if code = error_table_$id_not_found then
		call ssu_$abort_line (sci_ptr, code, "^/There is no Mail Table entry for ^[^a^;you^].",
		     person_id_specified, person_id);
	     else if code = error_table_$lock_wait_time_exceeded then
		call ssu_$abort_line (sci_ptr, code, "^/The Mail Table is being updated; try again in a few minutes.")
		     ;
	     else call ssu_$abort_line (sci_ptr, code, "^/Storing the new Mail Table entry for ^[^a^;you^].",
		     person_id_specified, person_id);
	end;
	call cleanup_smla ();
RETURN_FROM_SMLA:
	return;

cleanup_smla:
     proc ();

	if address_ptr ^= null () then call mail_system_$free_address (address_ptr, ignore_code);
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	return;

     end cleanup_smla;

abort_smla:
     proc ();

	call cleanup_smla ();
	go to RETURN_FROM_SMLA;

     end abort_smla;

ends_in_s:
     proc (P_string) returns (bit (1)) reducible;

	dcl     P_string		char (*) varying;
	dcl     length		builtin;
	dcl     last_char		char (1);

	last_char = substr (P_string, length (P_string), 1);
	return (last_char = "s" | last_char = "S");
     end ends_in_s;


display_mailing_address:
dsmla:
     entry options (variable);

	WHOAMI = "display_mailing_address";
	sci_ptr = null ();
	address_ptr, alias_area_ptr = null ();
	code = 0;
	on cleanup call cleanup_dsmla ();

	call ssu_$standalone_invocation (sci_ptr, WHOAMI, VERSION, null (), abort_dsmla, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Creating standalone subsystem invocation.");
	     return;
	end;
	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count = 0 then
	     call display_one_address ("");		/* Default to self */
	else do;
	     match_stars = "1"b;			/* set */
	     do arg_idx = 1 to arg_count;		/* Now process them */
		call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
		if index (arg, "-") = 1 then do;
		     if arg = "-name" | arg = "-nm" then do;
			call ssu_$arg_ptr (sci_ptr, arg_idx + 1, arg_ptr, arg_len);
			if arg = "" then
			     call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
				"The null string is not a valid Mail Table entry name.");
			else do;
			     match_stars = "0"b;	/* name may literally contains star characters, don't match */
			     arg_idx = arg_idx + 1;	/* now increment it */
			end;
		     end;
		     else call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", arg);
		end;
		person_id = arg;
		call display_one_address (person_id);
	     end;
	end;
	call cleanup_dsmla ();
RETURN_FROM_DSMLA:
	return;

display_one_address:
     proc (P_name);

	dcl     P_name		char (*) varying;

	dcl     acs_path		char (201);
	dcl     alias_names		char (256) varying;
	dcl     code		fixed bin (35);
	dcl     buffer		char (256);
	dcl     buffer_used		char (buffer_used_len) based (addr (buffer));
	dcl     buffer_used_len	fixed bin (21);
	dcl     s_name_lower	char (32);
	dcl     r_name		char (32) varying;
	dcl     r_name_lower	char (32);
	dcl     mta_idx		fixed bin;
	dcl     mte_idx		fixed bin;
	dcl     1 mta		aligned like mail_table_aliases based (mtap);
	dcl     mtap		ptr;
	dcl     translate		builtin;
	dcl     lowercase		char (26) int static options (constant) init ("abcdefghijklmnopqrstuvwxyz");
	dcl     UPPERCASE		char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

	star_name = "0"b;
	mte_idx = 0;
	call check_star_name_ (rtrim (P_name), CHECK_STAR_IGNORE_ALL, star_type, code);
	if code ^= 0 then call ssu_$print_message (sci_ptr, code, "Unable to check starname type.");
	if star_type = STAR_TYPE_USE_PL1_COMPARE | ^match_stars then go to get_primary_name;
	s_name_lower = translate (P_name, lowercase, UPPERCASE);
						/* lowercase version of starname */

get_indexed_name:
	mte_idx = mte_idx + 1;
	call mail_table_$get_name_by_index (mte_idx, MAIL_TABLE_RAW_ENTRY_VERSION_1, r_name, code);
	if code = error_table_$bad_index then return;	/* end of table */
	else if code = error_table_$no_record then go to get_indexed_name;
	else if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "");
	r_name_lower = translate (r_name, lowercase, UPPERCASE);
						/* lowercase version of matchname */
	if star_type = STAR_TYPE_USE_MATCH_PROCEDURE then do;
	     star_name = "1"b;
	     call match_star_name_ (r_name_lower, s_name_lower, code);
	     if code = 0 then do;
		P_name = r_name;
		go to get_primary_name;
	     end;
	     else go to get_indexed_name;
	end;
	else if star_type = STAR_TYPE_MATCHES_EVERYTHING then do;
	     star_name = "1"b;
	     P_name = r_name;
	     go to get_primary_name;
	end;

get_primary_name:
	call mail_table_$get (P_name, address_ptr, acs_path, code);
	if code ^= 0 then
	     if code = error_table_$id_not_found then
		call ssu_$print_message (sci_ptr, code, "There is no Mail Table entry for ^[you^;^a^].",
		     (length (P_name) = 0), P_name);
	     else call ssu_$print_message (sci_ptr, code, "Getting ^[your^;^a'^[s^]^] mailing address.",
		     (length (P_name) = 0), P_name, ^ends_in_s (P_name));
	else do;
	     buffer_used_len = 0;
	     call mlsys_utils_$format_address_field ("", address_ptr, -1, addr (buffer), length (buffer),
		buffer_used_len, code);
	     if code ^= 0 then			/* Shouldn't happen */
		call ssu_$print_message (sci_ptr, code,
		     "Internal error while formatting ^[your^;^a'^[s^] mailing address.", (P_name = ""), P_name,
		     ^ends_in_s (P_name));

	     if P_name ^= "" then do;
		call ssu_$get_area (sci_ptr, null (), "Get aliases", alias_area_ptr);
		call mail_table_$get_aliases (P_name, MAIL_TABLE_ALIASES_VERSION_1, alias_area_ptr, mtap, code);
		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Getting aliases for ^a", P_name);
		alias_names = "";
		do mta_idx = 1 to mta.n_names;
		     if mta.names (mta_idx) ^= P_name then alias_names = alias_names || mta.names (mta_idx) || ", ";
		end;
check_aliases:
		if alias_names ^= "" then do;
		     alias_names = substr (alias_names, 1, length (alias_names) - 2);
						/* remove the trailing comma and space */
		end;
		else alias_names = "No aliases";
	     end;
display:
	     if P_name = "" then
		call ioa_ ("Your Mail Table entry:");
	     else do;
		call ioa_ ("Mail Table entry: ^a", P_name);
		call ioa_ ("  Aliases: ^a", alias_names);
		if acs_path ^= "" then call ioa_ ("  ACS pathname: ^a", acs_path);
	     end;
	     call ioa_ ("  Mailing address: ^a", buffer_used);
	end;
	if star_name then go to get_indexed_name;
     end display_one_address;

cleanup_dsmla:
     proc ();

	if address_ptr ^= null () then call mail_system_$free_address (address_ptr, ignore_code);
	if alias_area_ptr ^= null () then call ssu_$release_area (sci_ptr, alias_area_ptr);
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	return;

     end cleanup_dsmla;

abort_dsmla:
     proc ();

	call cleanup_dsmla ();
	go to RETURN_FROM_DSMLA;

     end abort_dsmla;


     end set_mailing_address;
