02/06/84  decode_definition_


Entry points in decode_definition_:
   (List is generated by the help command)


:Entry: decode_definition_: 02/06/84  decode_definition_

Function: given a pointer to an object segment definition, returns
the decoded information of that definition in a structured, directly
accessible format.  This subroutine can only be used on one segment at
a time because it uses internal static storage.


Syntax:
declare decode_definition_ entry (ptr, ptr, bit(1) aligned)
call decode_definition_ (def_ptr, structure_ptr, eof)


Arguments:
def_ptr
   is a pointer to the selected definition.  (Input).  (The caller
   extracts this from the previously returned information.)  The
   initial pointer with which decode_definition_ can be called is a
   pointer to the base of the object segment (i.e., with a zero
   offset), unless the decode_definition_$init entry point has been
   called, in which case the initial pointer can be a pointer to the
   beginning of the definition section (as returned by the object_info_
   subroutine).


structure_ptr
   is a pointer to the structure in which decode_definition_
   returns the desired information.  It is declared in
   decode_definition_str.incl.pl1. (Input)
eof
   is a binary indicator that is "1"b if the current invocation of
   decode_definition_ causes the search to go beyond the end of the
   definition list.  If that is the case, the returned information in
   the structure is null.  It may also be "1"b if any error occurs.
   (Output)


:Entry:  init:  02/06/84 decode_definition_$init


Function:  This entry point is used for initialization and is
especially useful when the object segment does not begin at offset 0
(as for an archive component).  This entry point has no effect when the
decode_definition_$full entry point is being used.


Syntax:
declare decode_definition_$init entry (ptr, fixed bin(24));
call decode_definition_$init (seg_ptr, bit_count);


Arguments:
seg_ptr
   is a pointer to the beginning of an object segment (not necessarily
   with an offset of 0).  (Input)
bit_count
   is the bit count of the object segment.  (Input)
